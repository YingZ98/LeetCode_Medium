# 55. Jump Game
"""
从后往前遍历
如果跳不到i点，那么一定跳不到i后面的点。
"""
class Solution:
    def canJump(self, nums: List[int]) -> bool:
        lastpos = len(nums) - 1
        for i in range(len(nums) - 1, -1, -1):
            if nums[i] + i >= lastpos:
                lastpos = i
        return lastpos == 0
        
        
# 56. Merge Intervals
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        res = []
        for interval in sorted(intervals):
            if not res or interval[0] > res[-1][-1]:
                res.append(interval)
            else:
                res[-1][-1] = max(interval[-1], res[-1][-1])
        return res
        
# 62. Unique Paths
# 动态规划： 状态、边界值、转移方程、答案
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        dp = [1] * n
        for i in range(1, m):
            for j in range(1, n):
                dp[j] += dp[j-1]
        return dp[-1]

# 73. Set Matrix Zeroes


# 75. Sort Colors
class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        first = 0
        last = len(nums) - 1
        while first < len(nums) and nums[first] == 0:
            first += 1
        while last >= 0 and nums[last] == 2:
            last -= 1
        
        index = first
        while index <= last:
            if nums[index] == 1:
                index += 1
            elif nums[index] == 0:
                nums[index], nums[first] =  nums[first], nums[index]
                index += 1
                first += 1
            elif nums[index] == 2:
                nums[index], nums[last] =  nums[last], nums[index]
                last -= 1
